1.merge
    1-1.3-way merge
        브랜치에 각각 신규 commit이 1회 이상 있는 경우 두 브랜치의 코드를 합쳐 신규 commit 생성
        신규 브랜치의 소스가 중요할 경우 히스토리를 남기기 위해 3-way를 사용하기도 하지만
        그렇지 않다면 기준 브랜치의 로그가 더러워질 수 있음
    1-2.fast-forward merge
        기준 브랜치에 신규 commit이 없을 경우 merge를 실행하면 자동으로 fast-forward merge 발동
        신규브랜치나 기준브랜치나 똑같다고 보는 것
        싫으면 git merge --no-ff 브랜치명 명령어로 강제로 3-way merge 할 수 있음
        (실행해봄)
    1-3.rebase and merge
        기준 브랜치에 신규 commit이 있을 경우 신규 브랜치의 시작점을 기준 브랜치의 가장 최근 commit 뒤로 옮기는 것
        3-way 말고 강제로 fast-forward merge하고 싶을 경우 사용
        commit 내역을 기준 브랜치 하나로 연결하고 싶을 때 사용 (로그가 더러워지는 걸 막을 수 있음)
        사용법 : 신규 브랜치로 이동해서 git rebase main(기준브랜치명) 한 뒤 fast-forward merge 하면 됨
               git switch 신규브랜치 
               git rebase main
               git switch main
               git merge 신규브랜치
        기준 브랜치 말고 신규 브랜치끼리도 가능함
        단점은 브랜치끼리 차이가 많이 날 경우 conflict 발생할 확률이 큼
    1-4.squash and merge
        신규 브랜치의 commit들을 하나의 commit으로 합쳐 기준 브랜치에 추가
        신규 브랜치의 모든 commit 이력들이 main log에 남지 않아 log가 더러워지지 않음
